import pandas as pd
import io
import requests

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here
    # print(data[['pickup_longitude']])
    data['tpep_pickup_datetime'] = pd.to_datetime(data['tpep_pickup_datetime'])
    data['tpep_dropoff_datetime'] = pd.to_datetime(data['tpep_dropoff_datetime'])
    data.drop_duplicates().reset_index(drop=True)
    datetime_dim = data[['tpep_pickup_datetime','tpep_dropoff_datetime']].drop_duplicates().reset_index(drop=True)

    datetime_dim['pickup_hour']= datetime_dim['tpep_pickup_datetime'].dt.hour
    datetime_dim['pickup_day']= datetime_dim['tpep_pickup_datetime'].dt.day
    datetime_dim['pickup_month']= datetime_dim['tpep_pickup_datetime'].dt.month
    datetime_dim['pickup_year']= datetime_dim['tpep_pickup_datetime'].dt.year
    datetime_dim['pickup_weekday']= datetime_dim['tpep_pickup_datetime'].dt.weekday

    datetime_dim['drop_hour']= datetime_dim['tpep_dropoff_datetime'].dt.hour
    datetime_dim['drop_day']= datetime_dim['tpep_dropoff_datetime'].dt.day
    datetime_dim['drop_month']= datetime_dim['tpep_dropoff_datetime'].dt.month
    datetime_dim['drop_year']= datetime_dim['tpep_dropoff_datetime'].dt.year
    datetime_dim['drop_weekday']= datetime_dim['tpep_dropoff_datetime'].dt.weekday

    datetime_dim.index = datetime_dim.index+1
    datetime_dim['datetime_id']=datetime_dim.index
    datetime_dim = datetime_dim[['datetime_id','tpep_pickup_datetime','pickup_hour','pickup_day','pickup_month','pickup_year','pickup_weekday','tpep_dropoff_datetime','drop_hour','drop_day','drop_month','drop_year','drop_weekday']]

    passenger_count_dim = data[['passenger_count']].drop_duplicates().reset_index(drop=True)
    passenger_count_dim.index = passenger_count_dim.index +1
    passenger_count_dim['passenger_count_id']=passenger_count_dim.index
    passenger_count_dim = passenger_count_dim[['passenger_count_id','passenger_count']]

    trip_distance_dim = data[['trip_distance']].drop_duplicates().reset_index(drop=True)
    trip_distance_dim.index = trip_distance_dim.index +1
    trip_distance_dim['trip_distance_id']=trip_distance_dim.index
    trip_distance_dim = trip_distance_dim[['trip_distance_id','trip_distance']]


    pickup_location_dim = data[['pickup_longitude','pickup_latitude']].drop_duplicates().reset_index(drop=True)
    pickup_location_dim.index = pickup_location_dim.index +1
    pickup_location_dim['pickup_location_id'] = pickup_location_dim.index
    pickup_location_dim =pickup_location_dim[['pickup_location_id','pickup_latitude','pickup_longitude']]


    drop_location_dim = data[['dropoff_longitude','dropoff_latitude']].drop_duplicates().reset_index(drop=True)
    drop_location_dim.index = drop_location_dim.index +1
    drop_location_dim['drop_location_id'] = drop_location_dim.index
    drop_location_dim =drop_location_dim[['drop_location_id','dropoff_latitude','dropoff_longitude']]

    ratecode_dim = data[['RatecodeID']].drop_duplicates().reset_index(drop=True)


    ratecode_type={
    1: 'Standard rate',
    2:'JFK',
    3:'Newark',
    4:'Nassau or Westchester',
    5:'Negotiated fare',
    6:'Group ride'
    }

    ratecode_dim.index =ratecode_dim.index+1
    ratecode_dim['ratecode_id'] = ratecode_dim.index
    ratecode_dim['ratecode_name'] =ratecode_dim['RatecodeID'].map(ratecode_type)

    ratecode_type={
    1: 'Standard rate',
    2:'JFK',
    3:'Newark',
    4:'Nassau or Westchester',
    5:'Negotiated fare',
    6:'Group ride'
    }

    ratecode_dim['ratecode_name'] =ratecode_dim['RatecodeID'].map(ratecode_type)

    payment_type={
    1:'Credit card',
    2:'Cash',
    3: 'No charge',
    4:'Dispute',
    5:'Unknown',
    6:'Voided trip'
    }


    payment_dim = data[['payment_type']].drop_duplicates().reset_index(drop=True)
    payment_dim.index =payment_dim.index+1
    payment_dim['payment_id'] = payment_dim.index
    payment_dim['payment_name'] =payment_dim['payment_id'].map(payment_type)
    payment_dim = payment_dim[['payment_id','payment_type','payment_name']]
    payment_dim

    fact_table = data.merge(passenger_count_dim, on= 'passenger_count')\
                    .merge(datetime_dim, on= ['tpep_pickup_datetime','tpep_dropoff_datetime'])\
                    .merge(trip_distance_dim, on= 'trip_distance')\
                    .merge(pickup_location_dim, on= ['pickup_latitude','pickup_longitude'])\
                    .merge(drop_location_dim, on= ['dropoff_latitude','dropoff_longitude'])\
                    .merge(ratecode_dim, on= 'RatecodeID')\
                    .merge(payment_dim, on= 'payment_type')\
                   [
                    ['VendorID', 'datetime_id', 'passenger_count_id',
                     'trip_distance_id', 'ratecode_id', 'store_and_fwd_flag',
                      'pickup_location_id', 'drop_location_id',
                     'payment_id', 'fare_amount', 'extra', 'mta_tax',
                      'tip_amount', 'tolls_amount',
                     'improvement_surcharge', 'total_amount']
                   ]


    return {"datetime_dim":datetime_dim.to_dict(orient="dict"),
            "passenger_count_dim":passenger_count_dim.to_dict(orient="dict"),
            "trip_distance_dim":trip_distance_dim.to_dict(orient="dict"),
            "ratecode_dim":ratecode_dim.to_dict(orient="dict"),
            "pickup_location_dim":pickup_location_dim.to_dict(orient="dict"),
            "drop_location_dim":drop_location_dim.to_dict(orient="dict"),
            "payment_dim":payment_dim.to_dict(orient="dict"),
            "fact_table":fact_table.to_dict(orient="dict")}



@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
